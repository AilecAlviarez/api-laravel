<?php

namespace App\Exceptions;

use App\Traits\ApiResponser;
use Illuminate\Auth\Access\AuthorizationException;
use Illuminate\Auth\AuthenticationException;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Database\QueryException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Illuminate\Validation\ValidationException;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

class Handler extends ExceptionHandler
{
    /**
     * A list of the exception types that are not reported.
     *
     * @var array
     */
    use ApiResponser;
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var array
     */
    protected $dontFlash = [
        'password',
        'password_confirmation',
    ];

    public function render($request, $e)
    {
        if($e instanceof AuthenticationException){
            return $this->ErrorResponse('error authentications');
        }else if($e instanceof ModelNotFoundException){
            return $this->ModelNotFound($e,$request);
        }else if ($e instanceof AuthorizationException){
            return $this->ErrorResponse('error authentications');
        }else if($e instanceof NotFoundHttpException) {
            $endpoint = $request->fullUrl();
            return response()->json("no existe {$endpoint}", 404);

        }else if ($e instanceof MethodNotAllowedHttpException){
            return response()->json('metodo no corresponde al enpoint');
        }
        else if ($e instanceof HttpException){
            $errorsMessage=$e->getMessage();
            return response()->json($errorsMessage,$e->getStatusCode());
        }else if ($e instanceof QueryException){
            $error=$e->errorInfo[1];
            if($error==1451){
                return response()->json('no se puede eliminar un objeto relacionado con otro');
            }else{
                return response()->json($error);
            }
        }
        if(config('app.debug')){
            return parent::render($request, $e);
        }
        return response()->json('error interno',500);
        // TODO: Change the autogenerated stub
    }

    public function ErrorHttp($e,$request){

        return $this->ErrorResponse("no existe");
    }


    public function register()
    {
        //
        $this->reportable(function(ValidationException $exception,$request){
            return $this->convertValidationExceptionToResponse($exception,$request);
        });

        /*  $this->renderable(function($request,ModelNotFoundException $exception){
            //  return response()->json($exception,$request);
              return $this->ModelNotFound($exception,$request);
          });*/

    }
    protected function ModelNotFound(ModelNotFoundException $exception,$request){
        $model=strtolower(class_basename($exception->getModel()));
        return $this->ErrorResponse("no se encontro en el modelo {$model} el id especificado",404);

    }
    protected function convertValidationExceptionToResponse(ValidationException $e, $request)
    {
        $errors=$e->validator->errors()->getMessages();

        /* return $request->expectsJson()
             ? $this->invalidJson($request, $e)
             : $this->invalid($request, $e);*/
        return $this->ErrorResponse($errors,422);
    }
}
